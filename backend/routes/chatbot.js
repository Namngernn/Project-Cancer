const express = require("express");
const pool = require("../config.js");
const axios = require("axios");
const bodyParser = require("body-parser");
const cookieParser = require("cookie-parser");
const cron = require("node-cron");
const app = express();

app.use(express.json());
app.use(cookieParser());

require("dotenv").config();
const LINE_CHANNEL_ACCESS_TOKEN = process.env.LINE_CHANNEL_ACCESS_TOKEN;

//‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
cron.schedule("0 9 * * SUN", async () => {
  try {
    const [users] = await pool.query("SELECT userIdLine FROM user");
    users.forEach((user) => {
      sendLineNotification(
        user.userIdLine,
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ"
      );
    });
  } catch (error) {
    console.error("Error sending notifications:", error);
  }
});

//‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
function formatThaiDate(dateString) {
  if (!dateString) {
    console.error(
      "‚ùå formatThaiDate ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ dateString ‡πÄ‡∏õ‡πá‡∏ô undefined ‡∏´‡∏£‡∏∑‡∏≠ null"
    );
    return "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ";
  }

  try {
    const date = new Date(dateString);
    if (isNaN(date.getTime())) {
      console.error("‚ùå formatThaiDate: ‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", dateString);
      return "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ";
    }

    const thaiMonths = [
      "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°",
      "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå",
      "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°",
      "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô",
      "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°",
      "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
      "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°",
      "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°",
      "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô",
      "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°",
      "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô",
      "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°",
    ];
    const day = date.getDate();
    const month = thaiMonths[date.getMonth()];
    const year = date.getFullYear() + 543;
    const hours = date.getHours().toString().padStart(2, "0");
    const minutes = date.getMinutes().toString().padStart(2, "0");

    return `‡∏ß‡∏±‡∏ô${
      ["‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå", "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "‡∏û‡∏∏‡∏ò", "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡πÄ‡∏™‡∏≤‡∏£‡πå"][
        date.getDay()
      ]
    }‡∏ó‡∏µ‡πà ${day} ${month} ${year} ‡πÄ‡∏ß‡∏•‡∏≤ ${hours}:${minutes}`;
  } catch (error) {
    console.error("‚ùå formatThaiDate: ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error.message);
    return "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ";
  }
}

router.post("/webhook", async (req, res) => {
  const authHeader = req.headers["authorization"];
  if (!authHeader || authHeader !== "Bearer YOUR_SECRET_API_KEY") {
    return res.status(403).json({ message: "Unauthorized" });
  }

  // map intent
  try {
    const queryResult = req.body.queryResult;
    const intent = queryResult.intent.displayName;

    console.log("üî• Intent ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö:", intent);
    console.log(
      "üîç Webhook Request Dialogflow:",
      JSON.stringify(req.body, null, 2)
    );

    if (intent === "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å") {
      const weightInput = queryResult.parameters
        ? queryResult.parameters["unit-weight"]
        : null;

      if (
        !weightInput ||
        weightInput === "" ||
        Object.keys(weightInput).length === 0
      ) {
        console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å");
        return res.json({
          fulfillmentText:
            "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ö‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô 54 ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏° 54kg",
        });
      }

      console.log("üìå ‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤:", weightInput);

      const userId =
        req.body.originalDetectIntentRequest.payload.data.source.userId;
      const response = await recordWeight(userId, queryResult);
      return res.json(response);
    } else if (intent === "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢") {
      const userId =
        req.body.originalDetectIntentRequest.payload.data.source.userId;
      try {
        // const { userName, formattedDate } = await checkAppointment(userId);
        const appointmentResult = await checkAppointment(userId);
        if (!appointmentResult.formattedDate) {
          return res.json({
            fulfillmentText: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
          });
        }
        return res.json({
          fulfillmentText: `‚úÖ ‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${appointmentResult.formattedDate}`,
        });
      } catch (error) {
        return res.json({
          fulfillmentText: `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`,
        });
      }
    }

    return res.json({ fulfillmentText: "‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà" });
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏ö‡∏ô:", error.message);
    return res.json({ fulfillmentText: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + error.message });
  }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å
async function recordWeight(userId, queryResult) {
  try {
    console.log("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å...");
    console.log(
      "‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å Dialogflow:",
      JSON.stringify(queryResult.parameters, null, 2)
    );

    if (!queryResult || !queryResult.parameters) {
      console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå queryResult.parameters");
      return { fulfillmentText: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å" };
    }

    let weightInput = queryResult.parameters["unit-weight"];

    if (
      !weightInput ||
      weightInput === "" ||
      Object.keys(weightInput).length === 0
    ) {
      console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á");
      return { fulfillmentText: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô ‡πÄ‡∏ä‡πà‡∏ô 54‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°" };
    }

    if (
      weightInput &&
      typeof weightInput === "object" &&
      !Array.isArray(weightInput)
    ) {
      weightInput = [weightInput];
    }
    if (
      !weightInput ||
      !Array.isArray(weightInput) ||
      weightInput.length === 0
    ) {
      console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á");
      return { fulfillmentText: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô ‡πÄ‡∏ä‡πà‡∏ô 54‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°" };
    }

    const weight = weightInput[0]?.amount;
    if (!weight || isNaN(weight)) {
      console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      return { fulfillmentText: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô 54, 54kg" };
    }

    console.log("‚úÖ ‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:", weight);

    const [userRows] = await pool.query(
      `SELECT u.userName, a.HN 
       FROM user u
       INNER JOIN appointment a ON u.userName = a.IDcard
       WHERE u.UserIdLine = ? OR u.userName = ?
       LIMIT 1`,
      [userId, userId]
    );
    console.log("userIdLine:", userId);

    if (userRows.length === 0) {
      throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");
    }

    const userName = userRows[0].userName;
    console.log("IDcard :", userName);
    const HN = userRows[0].HN;
    console.log("HN :", HN);

    // ‡∏î‡∏∂‡∏á Appointment ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const [appointmentRows] = await pool.query(
      `SELECT appointId FROM appointment WHERE IDcard = ? ORDER BY appointDate DESC LIMIT 1`,
      [userName]
    );

    if (appointmentRows.length === 0) {
      throw new Error(
        "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞"
      );
    }

    const latestAppointId = appointmentRows[0].appointId;

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏•‡∏á Database
    await pool.query(
      `INSERT INTO weight (HN, weight, recorded_at, appointId) VALUES (?, ?, NOW(), ?)`,
      [HN, weight, latestAppointId]
    );

    console.log("Last Appointment :", latestAppointId);
    console.log("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å =", weight);

    return {
      fulfillmentText: `‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å ${weight} ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏° ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß`,
    };
  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error.message);
    return { fulfillmentText: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}` };
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡∏î
async function checkAppointment(userId) {
  if (!userId || userId.trim() === "") {
    return {
      fulfillmentMessages: [
        {
          text: {
            text: ["‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà"],
          },
        },
      ],
    };
  }

  try {
    const [userRows] = await pool.query(
      `SELECT userName FROM user WHERE UserIdLine = ? LIMIT 1`,
      [userId]
    );

    if (userRows.length === 0) {
      return {
        fulfillmentMessages: [
          {
            text: {
              text: ["‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"],
            },
          },
        ],
      };
    }

    const userName = userRows[0].userName;

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const [treatmentRows] = await pool.query(
      `SELECT appointment.treatmentId, appointment.appointDate
      FROM appointment
      WHERE appointment.IDcard = ?
      ORDER BY appointment.appointDate DESC
      LIMIT 1
      `,
      [userName]
    );

    console.log("userName from database:", userName);
    console.log("Query Result:", treatmentRows);

    if (treatmentRows.length > 0) {
      console.log("üîç treatmentRows:", treatmentRows);

      const { appointDate } = treatmentRows[0];
      console.log("üîç appointDate:", appointDate);
      if (!appointDate) {
        throw new Error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö appointDate ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
      }

      const formattedDate = formatThaiDate(appointDate);
      console.log(`Appointment formattedDate: ${formattedDate}`);

      console.log("üì© ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö LINE:", {
        fulfillmentMessages: `‚úÖ ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${formattedDate}`,
      });

      return {
        userName, // üü¢ ‡∏™‡πà‡∏á userName ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
        formattedDate,
      };
    } else {
      console.log("No appointment found");

      return {
        fulfillmentMessages: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏`,
      };
    }
  } catch (error) {
    console.error("Database error:", error);

    return {
      fulfillmentMessages: [
        {
          text: {
            text: ["‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"],
          },
        },
      ],
    };
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô LINE API
async function sendLineNotification(userId, message) {
  try {
    const messageData = {
      to: userId,
      messages: [
        {
          type: "text",
          text: message,
        },
      ],
    };

    const response = await axios.post(
      "https://api.line.me/v2/bot/message/push",
      messageData,
      {
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`,
        },
      }
    );
    console.log("‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
  } catch (error) {
    console.error(
      "‚ùå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß",
      error.response?.data || error.message
    );
  }
}
exports.router = router;
